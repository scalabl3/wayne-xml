<?xml version="1.0"?>
<doc>
<h2>Building your first app with Android Studio</h2>

<p>This section describes how to build a Couchbase Lite app by using Android Studio.</p>

<h3>Setting up the Android Studio development environment</h3>

<p>Before you can build an app, you need to set up your development environment:</p>

<ol>
<li><p>Download and install <a href="http://developer.android.com/sdk/installing/studio.html">Android Studio</a>. </p></li>
<li><p>Launch Android Studio.</p></li>
<li>
<p>From the Quick Start menu on the welcome screen, select <strong>Configure &gt; SDK Manager</strong>. </p>

<p>If you already have a project open, you can open the SDK Manager by selecting <strong>Tools &gt; Android &gt; SDK Manager</strong> from the Android Studio menu bar.</p>
</li>
<li><p>In Android SDK Manager, select the following items and then click <strong>Install packages</strong>:</p></li>
</ol>
<pre><code>* Tools/Android SDK Tools
* Tools/Android SDK Platform-tools
* Tools/Android SDK Build-tools
* Android API (currently recommended: API 17)
* Extras/Google Repository
* Extras/Android Support Repository
</code></pre>

<h3>Creating an app with Android Studio</h3>

<p>This section shows how to create a simple Hello World app for an Android device with Couchbase Lite. It uses Maven to add the Couchbase Lite dependencies.</p>

<h4>Step 1: Create a new project</h4>

<ol>
<li><p>Launch Android Studio.</p></li>
<li><p>In the Welcome to Android Studio screen, choose <strong>New Project</strong>.</p></li>
<li>
<p>In the New Project window, enter the application name, module name, package name, and project location.</p>

<p>This example uses <code>HelloWorld</code> for the application name.</p>
</li>
<li>
<p>Set the minimum required SDK to <strong>API 9: Android 2.3 (Gingerbread)</strong> or later and use the currently recommended Android API.</p>

<p>After you fill in the fields, the New Project window should look something like this:</p>

<p><img src="images/new-project.png" width="100%"/>
</p>
<li><p>Click <strong>Next</strong>, and then move through the remaining setup screens and enter settings as necessary (or just accept the defaults).</p></li>
<li><p>Click <strong>Finish</strong>.</p></li>
</li>
<h4>Step 2: Add Couchbase Lite dependencies via Maven</h4>

<ol>
<li>
<p>Expand the <strong>HelloWorld</strong> folder, and then open the <strong>build.gradle</strong> file. </p>

<p>You should see a file that looks something like this:</p>

<p><img src="images/build-gradle.png" width="100%"/>

<p>If the <strong>build.gradle</strong> file is empty, then you are looking at the wrong one. Make sure you open the one in the <strong>HelloWorld</strong> folder (and not the one at the project level).</p>
</p>
<li>
<p>In the <strong>build.gradle</strong> file, add the following lines to the top-level <strong>repositories</strong> section (not the one under the buildscript section) so it can resolve dependencies through Maven Central and the Couchbase Maven repository:</p>

<pre><code>maven {
    url "http://files.couchbase.com/maven2/"
}
mavenLocal()
</code></pre>

<p>After you add the extra lines, the <strong>repositories</strong> section should look like this:</p>

<pre><code>repositories {
    mavenCentral()
    maven {
        url "http://files.couchbase.com/maven2/"
    }
    mavenLocal()
}
</code></pre>
</li>
<li>
<p>Select <strong>Tools  Open Terminal</strong>, create a <strong>libs</strong> directory, and then change to the new directory:</p>

<pre><code>$ mkdir libs
$ cd libs
</code></pre>
</li>
<li>
<p>In the Terminal window, download <a href="http://cl.ly/Pr1r/td_collator_so.jar">td<em>collator</em>so.jar</a> into the <strong>libs</strong> directory.  </p>

<p>You can use wget or curl to download the file:</p>

<pre><code>$ wget http://cl.ly/Pr1r/td_collator_so.jar
or
$ curl -OL http://cl.ly/Pr1r/td_collator_so.jar
</code></pre>
</li>
<li>
<p>In the <strong>build.gradle</strong> file, add the following lines to the top-level dependencies section (not the one under the buildscript section).</p>

<pre><code>// hack to add .so objects
compile fileTree(dir: 'libs', include: 'td_collator_so.jar')  
compile 'com.couchbase.cblite:CBLite:1.0.0-beta2'
</code></pre>

<p>After you add the extra lines, the dependencies section should look similar to this:</p>

<pre><code>dependencies {
    compile 'com.android.support:appcompat-v7:+'
    // hack to add .so objects
    compile fileTree(dir: 'libs', include: 'td_collator_so.jar')
    compile 'com.couchbase.cblite:CBLite:1.0.0-beta2'
}
</code></pre>
</li>
<li>
<p>In the Android Studio tool bar, click <strong>Sync Project with Gradle Files</strong>.</p>

<p><img src="images/sync-gradle.png" width="50%"/>
</p>
<li>
<p>In the Android Studio tool bar, click <strong>Run</strong>.</p>

<p>When requested, start the emulator. You should see the app start in the emulator and the text "Hello World" in the app window, similar to the following figure:</p>

<p><img src="images/hello-world-emulator.png" width="40%"/>
</p>
</li>
<h5>Troubleshooting tips</h5>

<p>Running the empty app at this point verifies whether the dependencies are set up correctly. If the app doesn't run properly for you, try the following troubleshooting tips:</p>

<ul>
<li>Errors in the <strong>build.gradle</strong> file are a common cause of problems: </li>
<ul>
<li>Double-check the spelling of all entries in the file.</li>
<li>Make sure all code added to the file is located in the correct sections.</li>
<li>Verify the path for Couchbase Lite in the compile statement in the dependencies section.</li>
<li>Compare your file to this <a href="images/build-gradle-sample.png">sample <strong>build.gradle</strong></a> file.
</li>
</ul>
<p/>
<li>Couchbase Lite for Android does not currently build correctly with Proguard. If you get build errors that mention Proguard, you can disable it by changing the <strong>build.gradle</strong> file <code>runProguard</code> setting in the <strong>android</strong> section to false. When you change it, the <em>android</em> section should look something like the following code:</li>

</ul>
<pre><code>
android {
     buildTypes {
        release {
            runProguard false
            proguardFile ...
        }
    }
 }
</code></pre>

<p/>

<h4>Step 3: Add the HelloWorld code</h4>

<ol>
<li>Open the <strong>MainActivity.java</strong> file.</li>
<li>
<p>Add the following lines of code to the imports section at the top of the file:</p>

<pre><code>import com.couchbase.lite.*;
import com.couchbase.lite.util.Log;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;
</code></pre>
</li>
<li>
<p>Add the following code at the end of the <code>onCreate</code> method in the <strong>MainActivity.java</strong> file, which is located in the <strong>/HelloWorld/HelloWorld/src/main/java/com/couchbase/helloworld</strong> directory.</p>

<pre><code class="java">final String TAG = "HelloWorld";
Log.d(TAG, "Begin Hello World App");

// create a manager
Manager manager = null;
try {
    manager = new Manager(getApplicationContext().getFilesDir(), Manager.DEFAULT_OPTIONS);
} catch (IOException e) {
    Log.e(TAG, "Cannot create manager object");
    return;
}

// create a name for the database and make sure the name is legal
String dbname = "hello";
if (!Manager.isValidDatabaseName(dbname)) {
    Log.e(TAG, "Bad database name");
    return;
}

// create a new database
Database database = null;
try {
    database = manager.getDatabase(dbname);
} catch (CouchbaseLiteException e) {
    Log.e(TAG, "Cannot get database");
    return;
}

// get the current date and time
SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
Calendar calendar = GregorianCalendar.getInstance();
String currentTimeString = dateFormatter.format(calendar.getTime());

// create an object that contains data for a document
MapString, Object docContent = new HashMapString, Object();
docContent.put("message", "Hello Couchbase Lite");
docContent.put("creationDate", currentTimeString);

// display the data for the new document
Log.d(TAG, "docContent=" + String.valueOf(docContent));

// create an empty document
Document document = database.createDocument();

// write the document to the database
try {
    document.putProperties(docContent);
} catch (CouchbaseLiteException e) {
    Log.e(TAG, "Cannot write document to database", e);
}

// save the ID of the new document
String docID = document.getId();

// retrieve the document from the database
Document retrievedDocument = database.getDocument(docID);

// display the retrieved document
Log.d(TAG, "retrievedDocument=" + String.valueOf(retrievedDocument.getProperties()));

Log.d(TAG, "End Hello World App");
</code></pre>
</li>
</ol>
<p>The code you just added creates a new database, and then creates a document, stores the document in the database, and retrieves the document. This section contains additional notes that supplement the comments in the code.</p>

<p>It creates a shared <code>Manager</code> object that manages a collection of databases. The Manager object can be used only in a single thread.</p>

<p>After it creates a name for the new database, it validates the name. A database name can consist of only lowercase alphabetic characters (a-z), digits (0-9) and a few special characters (_$()+-/), so it's important to validate the name.</p>

<p>To create the database, it calls <code>getDatabase()</code>, which is a method in the <code>Manager</code> class that returns a <code>Database</code> object. If the database does not already exist, <code>getDatabase()</code> creates it.</p>

<p><code>Map</code> objects provide JSON-compatible representations of data that are suitable for creating documents that you can store in the database. The document created by the code is a <code>HashMapString, Object</code> object named <code>docContent</code> that contains only two keys, <code>message</code> and <code>creationDate</code>. <code>message</code> contains the string "Hello Couchbase Lite!", and <code>creationDate</code> contains the time and date the document was created. The document content is written out to the log to show its content.</p>

<p>An empty <code>Document</code> object named <code>document</code> is created. The document content is added to the empty document and it is saved to the database by using the  <code>Document</code> class <code>putProperties()</code> method. If the document cannot be written to the database, an exception is thrown.</p>

<p>When the document is saved to the database, Couchbase Lite generates a document identifier property named <code>_id</code> and a revision identifier property named <code>_rev</code>, and adds them to the document. The generated <code>_id</code> for the new document is available via the <code>getId()</code> method of the <code>Document</code> class.</p>

<p>The saved document is retrieved from the database by using the <code>Database</code> class <code>getDocument()</code> method. The retrieved document is written out to the log to show its content, which now includes the <code>_id</code> and <code>_rev</code> properties created by Couchbase Lite.</p>

<h4>Step 4: Build and run HelloWorld</h4>

<ol>
<li><p>Click <strong>Run</strong>.</p></li>
<li>
<p>View the Hello World app messages in the <a href="http://developer.android.com/tools/help/logcat.html">logcat</a>.</p>

<p>If you filter the logcat output on the string <code>/Hello</code>, you can see just the messages from Hello World:</p>

<p><img src="images/hello-logcat.png" width="100%"/>
</p>
</li>
</ol></li></li></ol></ol></doc>
